// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/reserve/reserve.proto

package yuemnoi_reserve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BorrowingService_CreateRequestFromBorrowingPost_FullMethodName = "/BorrowingService/CreateRequestFromBorrowingPost"
	BorrowingService_GetBorrowingRequestById_FullMethodName        = "/BorrowingService/GetBorrowingRequestById"
	BorrowingService_ConfirmBorrowingRequest_FullMethodName        = "/BorrowingService/ConfirmBorrowingRequest"
	BorrowingService_RejectBorrowingRequest_FullMethodName         = "/BorrowingService/RejectBorrowingRequest"
	BorrowingService_ReturnItemRequest_FullMethodName              = "/BorrowingService/ReturnItemRequest"
)

// BorrowingServiceClient is the client API for BorrowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowingServiceClient interface {
	CreateRequestFromBorrowingPost(ctx context.Context, in *CreateRequestFromBorrowingPostInput, opts ...grpc.CallOption) (*CreateRequestFromBorrowingPostResponse, error)
	GetBorrowingRequestById(ctx context.Context, in *GetBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error)
	ConfirmBorrowingRequest(ctx context.Context, in *ConfirmBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error)
	RejectBorrowingRequest(ctx context.Context, in *RejectBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error)
	ReturnItemRequest(ctx context.Context, in *ReturnItemRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error)
}

type borrowingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowingServiceClient(cc grpc.ClientConnInterface) BorrowingServiceClient {
	return &borrowingServiceClient{cc}
}

func (c *borrowingServiceClient) CreateRequestFromBorrowingPost(ctx context.Context, in *CreateRequestFromBorrowingPostInput, opts ...grpc.CallOption) (*CreateRequestFromBorrowingPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequestFromBorrowingPostResponse)
	err := c.cc.Invoke(ctx, BorrowingService_CreateRequestFromBorrowingPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) GetBorrowingRequestById(ctx context.Context, in *GetBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingRequest)
	err := c.cc.Invoke(ctx, BorrowingService_GetBorrowingRequestById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) ConfirmBorrowingRequest(ctx context.Context, in *ConfirmBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingRequest)
	err := c.cc.Invoke(ctx, BorrowingService_ConfirmBorrowingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) RejectBorrowingRequest(ctx context.Context, in *RejectBorrowingRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingRequest)
	err := c.cc.Invoke(ctx, BorrowingService_RejectBorrowingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowingServiceClient) ReturnItemRequest(ctx context.Context, in *ReturnItemRequestInput, opts ...grpc.CallOption) (*BorrowingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowingRequest)
	err := c.cc.Invoke(ctx, BorrowingService_ReturnItemRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowingServiceServer is the server API for BorrowingService service.
// All implementations must embed UnimplementedBorrowingServiceServer
// for forward compatibility.
type BorrowingServiceServer interface {
	CreateRequestFromBorrowingPost(context.Context, *CreateRequestFromBorrowingPostInput) (*CreateRequestFromBorrowingPostResponse, error)
	GetBorrowingRequestById(context.Context, *GetBorrowingRequestInput) (*BorrowingRequest, error)
	ConfirmBorrowingRequest(context.Context, *ConfirmBorrowingRequestInput) (*BorrowingRequest, error)
	RejectBorrowingRequest(context.Context, *RejectBorrowingRequestInput) (*BorrowingRequest, error)
	ReturnItemRequest(context.Context, *ReturnItemRequestInput) (*BorrowingRequest, error)
	mustEmbedUnimplementedBorrowingServiceServer()
}

// UnimplementedBorrowingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBorrowingServiceServer struct{}

func (UnimplementedBorrowingServiceServer) CreateRequestFromBorrowingPost(context.Context, *CreateRequestFromBorrowingPostInput) (*CreateRequestFromBorrowingPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestFromBorrowingPost not implemented")
}
func (UnimplementedBorrowingServiceServer) GetBorrowingRequestById(context.Context, *GetBorrowingRequestInput) (*BorrowingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrowingRequestById not implemented")
}
func (UnimplementedBorrowingServiceServer) ConfirmBorrowingRequest(context.Context, *ConfirmBorrowingRequestInput) (*BorrowingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBorrowingRequest not implemented")
}
func (UnimplementedBorrowingServiceServer) RejectBorrowingRequest(context.Context, *RejectBorrowingRequestInput) (*BorrowingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBorrowingRequest not implemented")
}
func (UnimplementedBorrowingServiceServer) ReturnItemRequest(context.Context, *ReturnItemRequestInput) (*BorrowingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnItemRequest not implemented")
}
func (UnimplementedBorrowingServiceServer) mustEmbedUnimplementedBorrowingServiceServer() {}
func (UnimplementedBorrowingServiceServer) testEmbeddedByValue()                          {}

// UnsafeBorrowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowingServiceServer will
// result in compilation errors.
type UnsafeBorrowingServiceServer interface {
	mustEmbedUnimplementedBorrowingServiceServer()
}

func RegisterBorrowingServiceServer(s grpc.ServiceRegistrar, srv BorrowingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBorrowingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BorrowingService_ServiceDesc, srv)
}

func _BorrowingService_CreateRequestFromBorrowingPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequestFromBorrowingPostInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).CreateRequestFromBorrowingPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_CreateRequestFromBorrowingPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).CreateRequestFromBorrowingPost(ctx, req.(*CreateRequestFromBorrowingPostInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_GetBorrowingRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBorrowingRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).GetBorrowingRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_GetBorrowingRequestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).GetBorrowingRequestById(ctx, req.(*GetBorrowingRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_ConfirmBorrowingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmBorrowingRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).ConfirmBorrowingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_ConfirmBorrowingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).ConfirmBorrowingRequest(ctx, req.(*ConfirmBorrowingRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_RejectBorrowingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBorrowingRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).RejectBorrowingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_RejectBorrowingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).RejectBorrowingRequest(ctx, req.(*RejectBorrowingRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowingService_ReturnItemRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnItemRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowingServiceServer).ReturnItemRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowingService_ReturnItemRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowingServiceServer).ReturnItemRequest(ctx, req.(*ReturnItemRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowingService_ServiceDesc is the grpc.ServiceDesc for BorrowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BorrowingService",
	HandlerType: (*BorrowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequestFromBorrowingPost",
			Handler:    _BorrowingService_CreateRequestFromBorrowingPost_Handler,
		},
		{
			MethodName: "GetBorrowingRequestById",
			Handler:    _BorrowingService_GetBorrowingRequestById_Handler,
		},
		{
			MethodName: "ConfirmBorrowingRequest",
			Handler:    _BorrowingService_ConfirmBorrowingRequest_Handler,
		},
		{
			MethodName: "RejectBorrowingRequest",
			Handler:    _BorrowingService_RejectBorrowingRequest_Handler,
		},
		{
			MethodName: "ReturnItemRequest",
			Handler:    _BorrowingService_ReturnItemRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reserve/reserve.proto",
}

const (
	ReserveService_CreateLendingRequest_FullMethodName    = "/ReserveService/CreateLendingRequest"
	ReserveService_GetLendingRequestDetail_FullMethodName = "/ReserveService/GetLendingRequestDetail"
	ReserveService_RejectLendingRequest_FullMethodName    = "/ReserveService/RejectLendingRequest"
	ReserveService_AcceptLendingRequest_FullMethodName    = "/ReserveService/AcceptLendingRequest"
	ReserveService_ReturnItemRequest_FullMethodName       = "/ReserveService/ReturnItemRequest"
)

// ReserveServiceClient is the client API for ReserveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReserveServiceClient interface {
	CreateLendingRequest(ctx context.Context, in *CreateLendingRequestRequest, opts ...grpc.CallOption) (*CreateLendingRequestResponse, error)
	GetLendingRequestDetail(ctx context.Context, in *GetLendingRequestDetailRequest, opts ...grpc.CallOption) (*LendingRequest, error)
	RejectLendingRequest(ctx context.Context, in *RejectLendingRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error)
	AcceptLendingRequest(ctx context.Context, in *AcceptLendingRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error)
	ReturnItemRequest(ctx context.Context, in *ReturnItemRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error)
}

type reserveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReserveServiceClient(cc grpc.ClientConnInterface) ReserveServiceClient {
	return &reserveServiceClient{cc}
}

func (c *reserveServiceClient) CreateLendingRequest(ctx context.Context, in *CreateLendingRequestRequest, opts ...grpc.CallOption) (*CreateLendingRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLendingRequestResponse)
	err := c.cc.Invoke(ctx, ReserveService_CreateLendingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) GetLendingRequestDetail(ctx context.Context, in *GetLendingRequestDetailRequest, opts ...grpc.CallOption) (*LendingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LendingRequest)
	err := c.cc.Invoke(ctx, ReserveService_GetLendingRequestDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) RejectLendingRequest(ctx context.Context, in *RejectLendingRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LendingRequest)
	err := c.cc.Invoke(ctx, ReserveService_RejectLendingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) AcceptLendingRequest(ctx context.Context, in *AcceptLendingRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LendingRequest)
	err := c.cc.Invoke(ctx, ReserveService_AcceptLendingRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reserveServiceClient) ReturnItemRequest(ctx context.Context, in *ReturnItemRequestRequest, opts ...grpc.CallOption) (*LendingRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LendingRequest)
	err := c.cc.Invoke(ctx, ReserveService_ReturnItemRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReserveServiceServer is the server API for ReserveService service.
// All implementations must embed UnimplementedReserveServiceServer
// for forward compatibility.
type ReserveServiceServer interface {
	CreateLendingRequest(context.Context, *CreateLendingRequestRequest) (*CreateLendingRequestResponse, error)
	GetLendingRequestDetail(context.Context, *GetLendingRequestDetailRequest) (*LendingRequest, error)
	RejectLendingRequest(context.Context, *RejectLendingRequestRequest) (*LendingRequest, error)
	AcceptLendingRequest(context.Context, *AcceptLendingRequestRequest) (*LendingRequest, error)
	ReturnItemRequest(context.Context, *ReturnItemRequestRequest) (*LendingRequest, error)
	mustEmbedUnimplementedReserveServiceServer()
}

// UnimplementedReserveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReserveServiceServer struct{}

func (UnimplementedReserveServiceServer) CreateLendingRequest(context.Context, *CreateLendingRequestRequest) (*CreateLendingRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLendingRequest not implemented")
}
func (UnimplementedReserveServiceServer) GetLendingRequestDetail(context.Context, *GetLendingRequestDetailRequest) (*LendingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLendingRequestDetail not implemented")
}
func (UnimplementedReserveServiceServer) RejectLendingRequest(context.Context, *RejectLendingRequestRequest) (*LendingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLendingRequest not implemented")
}
func (UnimplementedReserveServiceServer) AcceptLendingRequest(context.Context, *AcceptLendingRequestRequest) (*LendingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptLendingRequest not implemented")
}
func (UnimplementedReserveServiceServer) ReturnItemRequest(context.Context, *ReturnItemRequestRequest) (*LendingRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnItemRequest not implemented")
}
func (UnimplementedReserveServiceServer) mustEmbedUnimplementedReserveServiceServer() {}
func (UnimplementedReserveServiceServer) testEmbeddedByValue()                        {}

// UnsafeReserveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReserveServiceServer will
// result in compilation errors.
type UnsafeReserveServiceServer interface {
	mustEmbedUnimplementedReserveServiceServer()
}

func RegisterReserveServiceServer(s grpc.ServiceRegistrar, srv ReserveServiceServer) {
	// If the following call pancis, it indicates UnimplementedReserveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReserveService_ServiceDesc, srv)
}

func _ReserveService_CreateLendingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLendingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).CreateLendingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_CreateLendingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).CreateLendingRequest(ctx, req.(*CreateLendingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_GetLendingRequestDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLendingRequestDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).GetLendingRequestDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_GetLendingRequestDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).GetLendingRequestDetail(ctx, req.(*GetLendingRequestDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_RejectLendingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLendingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).RejectLendingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_RejectLendingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).RejectLendingRequest(ctx, req.(*RejectLendingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_AcceptLendingRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptLendingRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).AcceptLendingRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_AcceptLendingRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).AcceptLendingRequest(ctx, req.(*AcceptLendingRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReserveService_ReturnItemRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnItemRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReserveServiceServer).ReturnItemRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReserveService_ReturnItemRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReserveServiceServer).ReturnItemRequest(ctx, req.(*ReturnItemRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReserveService_ServiceDesc is the grpc.ServiceDesc for ReserveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReserveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReserveService",
	HandlerType: (*ReserveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLendingRequest",
			Handler:    _ReserveService_CreateLendingRequest_Handler,
		},
		{
			MethodName: "GetLendingRequestDetail",
			Handler:    _ReserveService_GetLendingRequestDetail_Handler,
		},
		{
			MethodName: "RejectLendingRequest",
			Handler:    _ReserveService_RejectLendingRequest_Handler,
		},
		{
			MethodName: "AcceptLendingRequest",
			Handler:    _ReserveService_AcceptLendingRequest_Handler,
		},
		{
			MethodName: "ReturnItemRequest",
			Handler:    _ReserveService_ReturnItemRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reserve/reserve.proto",
}
